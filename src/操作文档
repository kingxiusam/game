1.erlang切换到指定目录的内置函数:cd(),eg:cd("C:/Users/Administrator/IdeaProjects/game/src")。
2.
  给Windows用户的一个小技巧.创建一个名为C:/program Files/er15.4.12/.Erlang的
  文件（根据实际的安装路径进行调整）、然后在文件中加入如下的内容:
  io:format("consulting . Erlang in "p-n",
  [element(2. Fitle:get cwd()]).
   %%Edit to the directory where you store your code
  io:format("now in:"p-n", [element(2 ft11e:get. Cwdo))]).
  保存之后，每次启动Erlang时，它如能自动切换到目录C:/WORAK.
3.能够返回fun和接收fun的函数都称为高阶函数。
4.lists.map(F,L)。将函数F应用到列表L。
    13> L=[1,2,3,4].
    [1,2,3,4]
    14> lists:map(Double,L).
    [2,4,6,8]

5.list.filter(P,L).过滤返回包含L列表中满足函数P的元素的新列表。
    13> L=[1,2,3,4].
    [1,2,3,4]
    16> P=fun(X)->X>3 end.
    #Fun<erl_eval.6.90072148>
    17> lists:filter(P,L).
    [4]



    lists:flatten/1
    将多层嵌套列表转为单层列表
    flatten(DeepList) -> List
    lists:flatten([[1], [2], 3, [4, [5, 6, [7, 8]]]]).
    [1,2,3,4,5,6,7,8]


    lists:flatten/2
    将多层嵌套列表转为单层列表
    用法：
    flatten(DeepList, Tail) -> List

    从元组列表里删除第N个与Key匹配的元组列表元素：
    keydelete(Key, N, TupleList1) -> TupleList2

    从元组列表里查找第N个与Key匹配的元组列表元素
    keyfind(Key, N, TupleList) -> Tuple | false

    列表里的元素递归调用递归调用函数:
        列表 List 里的每一个元素和一个累积器（accumulator）参数 Acc0 作为 Fun 的参数被调用执行;
        并返回一个新的累积器 Acc1 跟列表的下一个元素调用;
        直到调用完列表里的所有元素，最终返回累积器 Acc 的结果值;
        获取元素的地址从右到左。
        foldr(Fun, Acc0, List) -> Acc1
        eg:
            lists:foldr(fun(E, AccList) -> [E | AccList] end, [], [a, b, c, d, e]).
            [a,b,c,d,e]

        列表 List 里的每一个元素按从左向右的顺序;
        依次跟一个累积器（accumulator）参数 Acc0 作为 Fun 的参数被调用执行;
        并返回一个新的累积器 Acc1 跟列表的下一个元素调用，直到调用完列表里的所有元素;
        最终返回累积器 Acc 的结果值;
        获取元素的地址从左到右。
        foldl(Fun, Acc0, List) -> Acc1
        eg:
            lists:foldl(fun(E, AccList) -> [E | AccList] end, [], [a, b, c, d, e]).
            [e,d,c,b,a]

    生成一个序列正数列表:
    lists:seq(From, To) -> Seq    %%生成一个由 From 到 To 的序列正数列表,From、To必须是正数。
    lists:seq(From, To, Incr) -> Seq %%生成一个由 From 到 To，递增值是 Incr 的序列正数列表，From、To必须是正数。




Tail = [9, 10],
lists:flatten([[1], [2], 3, [4, [5, 6, [7, 8]]]], Tail).
[1,2,3,4,5,6,7,8,9,10]


6.
    div 取除数
    rem 取余数
7.将列表L转换为测试函数，测试传入的参数是否为L中的元素
    MakeTest= fun(L)  ->(fun(X)  -> lists:member(X,L) end) end.
    eg: 24> Fruit=[apples,milk,pears].
        [apples,milk,pears]
        25> IsFruit=MakeTest(Fruit).
        #Fun<erl_eval.6.90072148>
        26> IsFruit(apples).
        true
        27> IsFruit(apple).
        false
        28> IsFruit(milk).
        true
        29> IsFruit(pears).
        true
        30>

8.
    Muti=fun(Times)->(fun(X)->X*Times end) end.
    eg:
       Muti=fun(Times)->(fun(X)->X*Times end) end.
       #Fun<erl_eval.6.90072148>
       31> Muti(3).
       #Fun<erl_eval.6.90072148>
       32> Triple=Muti(3).
       #Fun<erl_eval.6.90072148>
       33> Triple(5).


9.
    if,switch,for,while  -------  模式匹配,高阶函数

10.
    %%自定义for循环实现
    for(Max,Max,F)->[F(Max)];
    for(I,Max,F)->[F(I)|for(I+1,Max,F)].

    eg:
        34> c(pp).
        {ok,pp}
        35> pp:for(1,10,fun(I)->I end).
        [1,2,3,4,5,6,7,8,9,10]
        36>pp:for(1,10,fun(X)->X*X end).
           [1,4,9,16,25,36,49,64,81,100]

11.    [{构造器}||{元组/用于匹配L中每个元素的模式}<-L]
    eg:
        45> [{Name,2*Number}||{Name,Number}<-Buy].
        [{apples,2},{pears,4},{milk,6}]

12.
       列表解释的常见表达式 [X||qualifier1,qualifier2,qualifier3] qualifier可以是生成器和过滤器
       51>[X||{a,X}<-[{a,4},{b,1},{c,5},{a,2},hello,"wow"]].
       [4,2]
13.
        %%快速排序算法:以Pivot为基准进行排序
        qsort([])->[];
        qsort([Pivot|T])->qsort([X||X<-T,X=<Pivot])
                ++[Pivot]++
                qsort([X||X<-T,X>Pivot]).
14.
        %%生成毕达格拉斯三元组
        pythag(N)->[{A,B,C}||
        %%            使用生成器和过滤器
                        A<-lists:seq(1,N),
                        B<-lists:seq(1,N),
                        C<-lists:seq(1,N),
                        A+B+C=<N,
                        A*A+B*B=:=C*C
                    ].
            eg:61> pp:pythag(9).
               []
               62> pp:pythag(30).
               [{3,4,5},{4,3,5},{5,12,13},{6,8,10},{8,6,10},{12,5,13}]
               63>

15.
        X--Y的--是列表的分离操作符（详见第5章）

16.
        用于强化模式匹配的结构

17.
        erlang中的短路布尔表达式：andalso,oralso

18.
        true(原子)断言在if表达式中的应用

19.
        record(记录)
        记录的定义和操纵：

        eg: 76> X=#todo{}.
            #todo{status = reminder,who = joe,text = undefined}

            75> rr("records.hrl").
            [todo]
            76> X=#todo.
            * 1: syntax error before: '.'
            76> X=#todo{}.
            #todo{status = reminder,who = joe,text = undefined}
            77> X1=#todo{status=urgent,text="fix errodata in file"}.
            #todo{status = urgent,who = joe,
                  text = "fix errodata in file"}
            78> X2=X1#todo{status=done}.
            #todo{status = done,who = joe,text = "fix errodata in file"}

20.
            记录是元组的伪装 使用rf()释放记录的定义
            eg：9> X.
               #todo{status = reminder,who = joe,text = undefined}
               10> rf(todo).
               ok
               11> X.
               {todo,reminder,joe,undefined}

21.
            遇到系统内部错误需要抛出异常时，可以在代码中显式抛出异常: throw(Exception),exit(Exception),erlang.error(Exception)(3个异常标签)。
            catch Express 当catch原语捕获到异常时，异常信息会转换成描述错误的元组返回{'EXIT',_},undefined,data....
22.         finally  在try()表达式执行完之后执行
                eg:
                    46> c(try_code).
                    {ok,try_code}
                    47> try_code:try_caught().
                    success
                    success
                    success
                    success
                    success
                    [{1,noraml,a},
                     {2,caught,thow,a},
                     {3,caught,exit,a},
                     {4,noraml,{"error",a}},
                     {5,caught,error,a}]


23.
              %%包装math:sqrt函数,程序异常时按照指定格式抛出相关异常信息
              eg:
                  sqrt(Number) when Number<0 ->
                      erlang:error({squareNegativeRootAgument,Number});
                  sqrt(Number)-> math:sqrt(Number).

24.
                2进制数据为可打印的字符串，shell显示为字符串的形式，否则为一组整数。
                    eg:
                        56> <<99,97,116>>.
                        <<"cat">>
                        58> <<1,2,3>>.
                        <<1,2,3>>

25.
                -spec 用于描述函数的参数和返回值类型
                    eg:
                        %% list_to_binary/1
                        -spec list_to_binary(IoList) -> binary() when
                              IoList :: iolist().
                        list_to_binary(_IoList) ->
                            erlang:nif_error(undefined).

                63> term_to_binary(["boy",person,23]).
                <<131, 108,0,0,0, 3,107,0,3,98,111,121,100,0,6,112,101,114,115,111,110,97,23,  106>>
                64> term_to_binary({"boy",person,23}).
                <<131,104,        3,107,0,3,98,111,121,100,0,6,112,101,114,115, 111,110,97,23      >>

26.比特语法

                77> Red=2.
                2
                78> Green=61.
                61
                79> Blue=20.
                20
                80> Mem = <<Red:5,Green:6,Blue:5>>.
                <<23,180>>
                82> <<C1:5,C2:6,C3:5>>=Mem.
                <<23,180>>
                83> C1.
                2
                84> C2.
                61
                85> C3.


27.             模块的函数调用   87> apply(lib_misc,max,[2,3])   <=>  lib_misc:max(2,3).

28.             导出该模块的所有函数
                    -compile(export_all)

29.
                begin end块的值就是块中最后一个表达式的值

30.             ~w是指对列表进行原封不动的输出,124> io:format("~w",["hello""hi"]).
                [104,101,108,108,111,104,105]

                133> io:format("~w",[104,101,108,108,111,104,105]).
                ** exception error: bad argument
                     in function  io:format/3

                134> io:format("~w",["hello","hi"]).
                ** exception error: bad argument
                     in function  io:format/3




31.             %% get/0 获取[{Key, Val}]列表形式的字典
                -spec get() -> [{Key, Val}] when
                      Key :: term(),
                      Val :: term().
                get() ->
                    erlang:nif_error(undefined).

                %% get/1 获取指定Key的Value值
                -spec get(Key) -> Val | undefined when
                      Key :: term(),
                      Val :: term().
                get(_Key) ->
                    erlang:nif_error(undefined).

                %% get_keys/1 获取值为Val的Key列表
                -spec get_keys(Val) -> [Key] when
                      Val :: term(),
                      Key :: term().
                get_keys(_Val) ->
                    erlang:nif_error(undefined).

                %% erase/0 返回整个进程字典数据[{Key, Val}],并删除它们
                -spec erase() -> [{Key, Val}] when
                      Key :: term(),
                      Val :: term().
                erase() ->
                    erlang:nif_error(undefined).

                %% erase/1 返回Key对应得值Val/undefined,并删除Key对应得Val值
                -spec erase(Key) -> Val | undefined when
                      Key :: term(),
                      Val :: term().
                erase(_Key) ->
                    erlang:nif_error(undefined).

32.
                引用: erlang:make_ref()创建引用,适用于创建唯一标签的场合。

33.             布尔表达式           or      and
                短路布尔表达式     oralso  andalso

34.             下划线变量,在定义的常规变量将未被使用时，使用下划线变量可避免潜在的bug和警告

35.             新增目录Dir到加载路径的头部 shell命令: -pa Dir
                -spec add_patha(Dir) -> add_path_ret() when
                      Dir :: file:filename().
                add_patha(Dir) when is_list(Dir) -> call({add_path,first,Dir}).

                新增目录Dir到加载路径的尾部 shell命令：-pz Dir
                -spec add_pathz(Dir) -> add_path_ret() when
                      Dir :: file:filename().
                add_pathz(Dir) when is_list(Dir) -> call({add_path,last,Dir}).
36.
                使用Makefile自动编译：



                经过这些步露，最后我们得到一个非常精简的make file,大概就像下面一样:
                .SUFFIXES: , erl . Beam
                .erl. Beam:
                erlc -W $<
                ERL . Erl -boot start clean
                MOOS = module l module2 module3
                all:compile
                .
                .
                .
37.
                3个新原语：spawn,send(使用!操作符),receiver
                spawn(Fun)创建新的并发进程对函数Fun进行求值,并返回进程id(Pid)--处理进程,
                eg:
                    3> Pid=spawn(fun area_server:loop/0).
                    <0.39.0>

                Pid ! Msg的值被定义为Msg,客户机向处理进程发送请求,Msg包含客户机请求信息(self(),A,B),可以是客户机自己的进程ID,其他请求参数


38.
                erlang每个进程都有自己的一个邮箱，向进程发送的消息都会被送入邮箱中
                        email    pattern1,pattern2    action

                        message1        not match        remove /save in savequeue
                        message2        not match        remove /save in savequeue
                        message3        not match        remove /save in savequeue

                        message4        match              未匹配消息message从保存队列savequue释放,重新放回进程邮箱


39.使用BIF管理进程

                %% register/2 将进程PidOrPort注册名为RegName的原子
                -spec register(RegName, PidOrPort) -> true when
                      RegName :: atom(),
                      PidOrPort :: port() | pid().
                register(_RegName, _PidOrPort) ->
                    erlang:nif_error(undefined).

                %% registered/0 返回系统中已注册的名称列表
                -spec registered() -> [RegName] when
                      RegName :: atom().
                registered() ->
                    erlang:nif_error(undefined).

                %% unregister/1 移除RegName对应进程的所有注册信息
                -spec unregister(RegName) -> true when
                      RegName :: atom().
                unregister(_RegName) ->
                    erlang:nif_error(undefined).

                %% whereis/1 判断RegName是否被其他进程注册,有则返回Pid，否则返回undefined。
                -spec whereis(RegName) -> pid() | port() | undefined when
                      RegName :: atom().
                whereis(_RegName) ->
                    erlang:nif_error(undefined).


40.尾递归技术
            编译尾递归函数时函数最后一个调用语句会被替换为简单的跳转指令,跳转到函数的开头部分。
            使用MFA模式动态更新运行进程：spawn(Module,Func,Args)


            显式的向进程Pid发送一个退出信号：exit(Pid,X).
            kill信号主要用于僵尸进程(谨慎使用)

41.捕获进程退出的编程模式




            1.模式1:我不在乎创建的进程是否崩溃
            下面这个进程仅使用spawn来创建一个并行进程:
            Pid . spawn(fun() ->. . End)
            如果没有其他语句。那么如果这个被生成的进程崩溃，当前进程会毫无察觉地继续执行自己
            的其他任务。
            2.模式2:如果我创建的进程崩溃那么我也自行消亡
            严格地讲，这里应改为"如果我创建的进程非正常的崩溃"。要达到这个目的，必须使用
            Spawn link来创建并行进程，而且一定不能在这之前将进程设为退出信号捕获状态。我们应该
            这么写:
            Pid - spawn_link(fun() - . . . End)
            此时，如果新生成的进程异常崩溃而发送非正常的退出信号，当前进程也会随之消亡。
            3.模式3:如果我创建的进程崩溃我需要处理错误
            在这种情况下，就要使用:spawn_link和trap_exit,代码如下:
            process_flag(trap_exit,true),把普通进程转换为系统进程
            Pid=spawn_link(fun() -> . . . End),
            loop (. . . ).
            1oop(state) ->
                        receive
                        {'EXIT', pid, reason] ->
                        %%do something with the error
                        1oop(state1);
                        ...
                        end

42.         使用标准库rpc模块的call函数调用指定模块的函数：rpc:call(NodeName,Module,Function,[Arg...])

43          具有相同cookie且彼此互相连接的集称为Erlang集群。

44.
            互相通信的节点必须要有相同的logicookie设置Cookie：
                1.拷贝.erlang.cookie文件
                2.erl -setcookie c
                3.erlang:set_cookie(node(),c)将本地节点的cookie设置为原子c

45.         以write的方式打开game.dat文件,并返回IO设备S3。
            {ok,S3}=file:open("game.dat",write).
            使用writeIO 向文件写入格式化数据：
                eg：
                io:format(S3,"~s",["hello"]).


            ets:new(Name, Options)创建新表

            根据匹配模式匹配表里的对象数据:
            match(Tab, Pattern) -> [Match]

            根据匹配模式 Pattern 匹配 ETS 表 Tab 里的对象数据。

            一个匹配模式也许包含的项值有：绑定部分（Erlang 项），'_' 可以匹配任何 Erlang 项，和匹配变量：'$N'（N>=0）

            函数将返回一个匹配每个对象数据的元素的列表，每个元素是一个绑定变量模式的有序列表。
            eg:
                Tab = ets:new(ets_tab, [named_table, bag]),
                ets:insert(Tab, [{rufsen, dog, 7}, {brunte, horse, 5}, {ludde, dog, 5}]),
                ets:match(Tab, {'_', '$1', '$2'}).
                运行结果：
                [[dog,7],[dog,5],[horse,5]]


            ets:foldl/3 对 ETS 数据遍历循环操作
                定义：-spec foldl(Function, Acc0, Tab) -> Acc1 when
                      Function :: fun((Element :: term(), AccIn) -> AccOut),
                      Tab :: tab(),
                      Acc0 :: term(),
                      Acc1 :: term(),
                      AccIn :: term(),
                      AccOut :: term().

                foldl(F, Accu, T) ->
                    ets:safe_fixtable(T, true),
                    First = ets:first(T),
                    try
                        do_foldl(F, Accu, First, T)
                    after
                	ets:safe_fixtable(T, false)
                    end.

            对数据遍历的规则跟lists:foldl/3一样

            dets:open_file()打开已经存在的表

46.         dets:lookup(TableName,Key)在表中查找匹配key的元组列表[tuple()]
            释放表：dets:close(),dets:delete()

            ets,dets用于存储元组,默认元组中的第一个元素为表的键。插入元组和获取元组都是基于表的键来操作的。

            获取表的指定(Item)信息：
                -spec info(Tab, Item) -> Value | undefined when
                      Tab :: tab(),
                      Item :: compressed | fixed | heir | keypos | memory
                            | name | named_table | node | owner | protection
                            | safe_fixed | size | stats | type,
                      Value :: term().



45.
            ~p 完整打印参数
            ~w 以标准语法写入数据
            ~s 参数是字符串

46.三字索引
            由三个字母组成     在向表中插入索引的时候通常使用<<A,B,C>>表示三字索引

47.
            %%  测量指定模块的指定函数的执行时间
            %% Measure the execution time (in microseconds) for an MFA.
            %%
            -spec tc(Module, Function, Arguments) -> {Time, Value} when
                  Module :: module(),
                  Function :: atom(),
                  Arguments :: [term()],
                  Time :: integer(),
                  Value :: term().
            tc(M, F, A) ->
                Before = os:timestamp(),
                Val = apply(M, F, A),
                After = os:timestamp(),
                {now_diff(After, Before), Val}.

**dict**:一个键值（Key-Value）字典的实现。
            -opaque dict(Key, Value) :: #dict{segs :: segs(Key, Value)}.

            以键值（Key - Value）对的形式存储在字典里。如果字典里已经存在 Key 的键，则把跟 Key 相关的值替换为 Value:
                -spec store(Key, Value, Dict1) -> Dict2 when
                      Dict1 :: dict(Key, Value), //Dict1为原字典
                      Dict2 :: dict(Key, Value).    //Dict2为新字典
                store(Key, Val, D0) ->
                    Slot = get_slot(D0, Key),
                    {D1,Ic} = on_bucket(fun (B0) -> store_bkt_val(Key, Val, B0) end,
                            D0, Slot),
                    maybe_expand(D1, Ic).

            初始构造一个新的字典：
                -spec new() -> dict().
                new() ->
                    Empty = mk_seg(?seg_size),
                    #dict{empty=Empty,segs={Empty}}.

            在指定字典里Dict查找跟键Key关联的值
                -spec find(Key, Dict) -> {'ok', Value} | 'error' when
                      Dict :: dict(Key, Value).
                find(Key, D) ->
                    Slot = get_slot(D, Key),
                    Bkt = get_bucket(D, Slot),
                    find_val(Key, Bkt)
            调用函数对字典里的键值进行递归遍历操作:
                -spec fold(Fun, Acc0, Dict) -> Acc1 when
                      Fun :: fun((Key, Value, AccIn) -> AccOut),
                      Dict :: dict(Key, Value),
                      Acc0 :: Acc,
                      Acc1 :: Acc,
                      AccIn :: Acc,
                      AccOut :: Acc.
                fold(F, Acc, D) -> fold_dict(F, Acc, D).

             更新字典里的一个值：(Dict1更新完成之后产生一个新字典Dict2)
                update(Key, Fun, Dict1) -> Dict2

             通过调用更新函数（Fun）来更新指定键 Key 在字典里的值，不同的是，如果指定的键在字典里不存在的话，不会报异常错误，而是用给出的指定初始值（Initial）替换
                update(Key, Fun, Initial, Dict1) -> Dict2

48.        gen_server:
                gen_server:start_link 会启动本地服务器
                创建gen_server作为supervision进程树的一部分,函数通过监督者supervisor直接或间接的被调用
                start_link(Mod, Args, Options) ->
                    gen:start(?MODULE, link, Mod, Args, Options).

                创建一个名为Name的通用服务器程序,回调模块为Mod ,Options控制了程序的操作行为,然后调用Mod:init(Args)来启动程序
                start_link(Name, Mod, Args, Options) ->
                    gen:start(?MODULE, link, Name, Mod, Args, Options).

                handle_info 用来处理发给服务器的原生信息      %%服务器与其他进程建立了连接.正在捕捉推出事件，可能突然收到{'EXIT',Pid,What},或者其他进程获取到通用服务器的Pid,给服务器发送信息，诸如此类的消息都将作为Info值传给回调函数。
                -callback handle_info(Info :: timeout | term(), State :: term()) ->
                    {noreply, NewState :: term()} |
                    {noreply, NewState :: term(), timeout() | hibernate} |
                    {stop, Reason :: term(), NewState :: term()}.

                gen_server:start创建独立的gen_sever进程，不作为进程树(supervision)的一部分，从而没有监督者supervisor


            gen：
                -spec start(module(), linkage(), emgr_name(), module(), term(), options()) ->
                    start_ret().
                start(GenMod, LinkP, Name, Mod, Args, Options) ->
                    case where(Name) of
                    undefined ->
                        do_spawn(GenMod, LinkP, Name, Mod, Args, Options);
                    Pid ->
                        {error, {already_started, Pid}}
                    end.

                -spec start(module(), linkage(), module(), term(), options()) -> start_ret().
                start(GenMod, LinkP, Mod, Args, Options) ->
                    do_spawn(GenMod, LinkP, Mod, Args, Options).

            ?MODULE展开的时候会对应此模块的名称

            -behavior(gen_server).使用该关键字后,在忘记定义回调函数时，编译器会报错


49.
            erlang中只有两种类型的共享内存：共享的ETS表和DETS表，
                public：所有知道这个表标志的进程都可以读写这个表
                protect：只有一个进程(他的创建者)可以写入数据，多个进程可进行读操作。


50.         erlang数据库mnesia：
                mnesia:force_load_table(ids) 加载表
                mnesia:start()启动数据库
                mnesia:create_table 创建表
                mnesia:create_schema([node()]),创建视图（数据库的初始化操作,参数[node()]为节点列表，node()表示当前节点）
                mnesia:read(ids,IdType,write),从ids读取指定IdType的数据
                mnesia:write(ids,NewColumn,write),将记录NewColumn写入ids
                mnesia:transaction(F) 为操作F提供事务机制
                mnesia:table(shop):
                    -record(shop,{item,quality,cost})
                    qlc(query list comprehensions)查询列表解析
                    qlc:q([X||X<-mnesia:table(shop)])从mnesia的shop中获取X(每行作为一个X),用这些X构成一个列表
                    qlc:q([{X#shop.item,X#shop.quality}]||X<-mnesia:table(shop)])从mnesia的shop中获取指定列组成的元组,用这些元组构成一个列表



        -type priority_level() ::
              low | normal | high | max.
              低级 |  普通  | 高级 |最高级



51.     进程标示操作：
        -spec process_flag(trap_exit, Boolean) -> OldBoolean when   %%普通进程转换为主进程
              Boolean :: boolean(),
              OldBoolean :: boolean();

                          (error_handler, Module) -> OldModule when
              Module :: atom(),
              OldModule :: atom();

                          (min_heap_size, MinHeapSize) -> OldMinHeapSize when
              MinHeapSize :: non_neg_integer(),
              OldMinHeapSize :: non_neg_integer();

                          (min_bin_vheap_size, MinBinVHeapSize) -> OldMinBinVHeapSize when
              MinBinVHeapSize :: non_neg_integer(),
              OldMinBinVHeapSize :: non_neg_integer();

                          (priority, Level) -> OldLevel when        %%将进程设定为指定优先级priority
              Level :: priority_level(),
              OldLevel :: priority_level();

                          (save_calls, N) -> OldN when
              N :: 0..10000,
              OldN :: 0..10000;

                          (sensitive, Boolean) -> OldBoolean when
              Boolean :: boolean(),
              OldBoolean :: boolean();

                          %% Deliberately not documented.
                          ({monitor_nodes, term()}, term()) -> term();
                          (monitor_nodes, term()) -> term().




            iolist_to_binary(IoListOrBinary) -> binary()

                IoListOrBinary = iolist() | binary()

            从IoListOrBinary的integers和binaries生成一个新的二进制数据并返回
            eg:
                > Bin1 = <<1,2,3>>.
                <<1,2,3>>
                > Bin2 = <<4,5>>.
                <<4,5>>
                > Bin3 = <<6>>.
                <<6>>
                > iolist_to_binary([Bin1,1,[2,3,Bin2],4|Bin3]).
                <<1,2,3,1,2,3,4,5,4,6>>


            size(Item) -> integer() >= 0

                Item = tuple() | binary()

            返回元组的节点个数 或者 在二进制或者比特串中二进制的个数：
            eg:
                > size({morni, mulle, bwange}).
                3
                > size(<<11, 22, 33>>).
                3


52.我们在使用Port时经常要关联其他上下文，以便port给我们发送数据时我们能够根据上下文来处理数据：
方法：
    1).使用ets:new(Port,Ctx),较慢
    2).用Port本身的空间存储Ctx,erlang:port_set_data 和erlang:port_get_data,一步到位，多核free



53.队列：由前列表和后列表组成（队列可以看成是由两个栈组成的数据结构）
            -opaque queue(Item) :: {list(Item), list(Item)}.

            -opaque queue() :: queue(_).

            %% Creation, inspection and conversion

            %% O(1)
            -spec new() -> queue().
            new() -> {[],[]}. %{RearList,FrontList}


            in(Item, Q1 :: queue(Item)) -> Q2 :: queue(Item)
            插入元素到Q1队列的后面，返回结果队列Q2.
            in_r(Item, Q1 :: queue(Item)) -> Q2 :: queue(Item)
            插入元素到Q1队列的前面，返回结果队列Q2.

        返回由N个元素副本Element组成的列表
            duplicate(N, Element) -> List.
            eg:
                lists:duplicate(5, elem_copy).
                结果：[elem_copy,elem_copy,elem_copy,elem_copy,elem_copy]。


54.statistics(Type) -> Res:返回跟指定类型 Type 相关的系统信息
        context_switches：返回 {ContextSwitches, 0}，参数 ContextSwitches 指的是系统启动到当前上下文切换的总数
        eg:
           erlang:statistics(context_switches).
           {21996,0}

55.检测函数是否输出并被加载
        function_exported(Module, Function, Arity) -> boolean()
        检测模块 Module 是否已经加载并且是否包含一个输出的函数 Function/Arity，如果是，则返回 true，否则返回 false。任何的 BIF（用 C 实现而不是 Erlang 实现的函数） 都返回 false。

            erlang:function_exported(lists, dropwhile, 2).
            结果：
                true

54.判断是否为引用类型,如果参数 Term 是一个引用（reference）类型，则返回 true，否则返回 false。
    erlang:is_reference(Term) -> boolean()

    Reference = erlang:make_ref(),
    erlang:is_reference(Reference).
    结果：
        true。

55.获取最近出现异常的堆栈跟踪信息：
        get_stacktrace() -> [{Module, Function, Arity | Args, Location}].



56.使用分隔符把字符串分割开来:用指定的分割符把字符串分割成字符串列表
    string.tokens(String, SeparatorList) -> Tokens
        eg:
            string:tokens("a-b-c-d-e","-").
            结果：["a","b","c","d","e"]。

57.在树中查找某个值。
    lookup(Key, Tree) -> none | {value, Val}
    在树里查找一个跟键 Key 相关的值，如果存在，则返回 {value, Val}，否则返回 none。